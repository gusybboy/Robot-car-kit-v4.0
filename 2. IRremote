/* 
This program uses an IR remote to control a car's movement. 
It responds to specific HEX codes received via the IR receiver.
Supported movements include forward, reverse, left, right, and stop. 
*/

int left = 7; // Define pin for left motor direction
int right = 8; // Define pin for right motor direction
int speeda = 5; // Define pin for motor A speed control
int speedb = 6; // Define pin for motor B speed control
int stb = 3; // Define pin for motor enable/standby
int speed = 0; // Initialize speed variable to 0

#include <IRremote.h> // Include IR remote library

const int IR_RECEIVE_PIN = 9; // Pin for IR receiver

void setup() {
    Serial.begin(9600); // Start serial communication at 9600 baud
    IrReceiver.begin(IR_RECEIVE_PIN, ENABLE_LED_FEEDBACK); // Initialize IR receiver
    Serial.println("IR Receiver Initialized. Waiting for input..."); // Print status message

    pinMode(left, OUTPUT); // Set left motor pin as output
    pinMode(right, OUTPUT); // Set right motor pin as output
    pinMode(stb, OUTPUT); // Set standby pin as output
}

void loop() {
    // Check if an IR signal is received
    if (IrReceiver.decode()) {
        unsigned long receivedData = IrReceiver.decodedIRData.decodedRawData; // Read received data
        Serial.print("Received HEX Value: 0x"); // Print received data prefix
        Serial.println(receivedData, HEX); // Print received data in HEX

        // Check received signal and execute corresponding action
        if (receivedData == 0xE619FF00) {
            Forward(50); // Move forward at speed 50
        }
        if (receivedData == 0xE31CFF00) {
            Reverse(50); // Move backward at speed 50
        }
        if (receivedData == 0xA15EFF00) {
            Right(50); // Turn right at speed 50
        }
        if (receivedData == 0xF30CFF00) {
            Left(50); // Turn left at speed 50
        }
        if (receivedData == 0xE718FF00) {
            Stop(0); // Stop all movement
        }

        IrReceiver.resume(); // Prepare to receive the next signal
    }
}

// Function to move forward
void Forward(int x) {
    digitalWrite(left, 1); // Set left motor direction forward
    digitalWrite(right, 1); // Set right motor direction forward
    analogWrite(speeda, x); // Set speed of motor A
    analogWrite(speedb, x); // Set speed of motor B
    digitalWrite(stb, 1); // Enable motor operation
}

// Function to move backward
void Reverse(int x) {
    digitalWrite(left, 0); // Set left motor direction backward
    digitalWrite(right, 0); // Set right motor direction backward
    analogWrite(speeda, x); // Set speed of motor A
    analogWrite(speedb, x); // Set speed of motor B
    digitalWrite(stb, 1); // Enable motor operation
}

// Function to turn right
void Right(int x) {
    digitalWrite(left, 1); // Set left motor forward
    digitalWrite(right, 0); // Set right motor backward
    analogWrite(speeda, x); // Set speed of motor A
    analogWrite(speedb, 0); // Stop motor B
    digitalWrite(stb, 1); // Enable motor operation
}

// Function to turn left
void Left(int x) {
    digitalWrite(left, 0); // Set left motor backward
    digitalWrite(right, 1); // Set right motor forward
    analogWrite(speeda, 0); // Stop motor A
    analogWrite(speedb, x); // Set speed of motor B
    digitalWrite(stb, 1); // Enable motor operation
}

// Function to stop all movement
void Stop(int x) {
    digitalWrite(left, 1); // Set left motor direction to stop
    digitalWrite(right, 1); // Set right motor direction to stop
    analogWrite(speeda, x); // Set speed of motor A to 0
    analogWrite(speedb, x); // Set speed of motor B to 0
    digitalWrite(stb, 1); // Enable standby mode
}
